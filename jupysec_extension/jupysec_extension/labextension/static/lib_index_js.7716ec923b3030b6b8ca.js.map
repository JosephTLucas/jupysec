{"version":3,"file":"lib_index_js.7716ec923b3030b6b8ca.js","mappings":";;;;;;;;;;;;;;;;;AAA+C;AACS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACO,kDAAkD;AACzD;AACA,qBAAqB,+EAA6B;AAClD,uBAAuB,8DAAW;AAClC;AACA;AACA;AACA,yBAAyB,8EAA4B;AACrD;AACA;AACA,kBAAkB,+EAA6B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,gFAA8B;AAChD;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AClC+D;AACZ;AACF;AACV;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gCAAgC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,2DAAS;AACxB,eAAe,iEAAe;AAC9B;AACA;AACA,gBAAgB,kBAAkB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,0BAA0B,6BAA6B;AACvD;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,KAAK;AACL;AACA,iEAAe,SAAS,EAAC;AACzB,2BAA2B,wDAAM;AACjC;AACA;AACA,wBAAwB,wEAAqB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,oDAAU;AACzC;AACA;AACA;AACA,gFAAgF,OAAO;AACvF;AACA;AACA","sources":["webpack://jupysec_extension/./lib/handler.js","webpack://jupysec_extension/./lib/index.js"],"sourcesContent":["import { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nexport async function requestAPI(endPoint = '', init = {}) {\n    // Make request to Jupyter API\n    const settings = ServerConnection.makeSettings();\n    const requestUrl = URLExt.join(settings.baseUrl, 'jupysec_extension', // API Namespace\n    endPoint);\n    let response;\n    try {\n        response = await ServerConnection.makeRequest(requestUrl, init, settings);\n    }\n    catch (error) {\n        throw new ServerConnection.NetworkError(error);\n    }\n    let data = await response.text();\n    if (data.length > 0) {\n        try {\n            data = JSON.parse(data);\n        }\n        catch (error) {\n            console.log('Not a JSON response body.', response);\n        }\n    }\n    if (!response.ok) {\n        throw new ServerConnection.ResponseError(response, data.message || data);\n    }\n    return data;\n}\n","import { ICommandPalette, IFrame } from '@jupyterlab/apputils';\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport { ILauncher } from '@jupyterlab/launcher';\nimport { requestAPI } from './handler';\n/**\n * The command IDs used by the server extension plugin.\n */\nvar CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.get = 'server:get-file';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * Initialization data for the jupysec extension.\n */\nconst extension = {\n    id: 'jupysec_extension',\n    autoStart: true,\n    optional: [ILauncher],\n    requires: [ICommandPalette],\n    activate: async (app, palette, launcher) => {\n        console.log('JupyterLab extension jupysec is activated!');\n        const { commands, shell } = app;\n        const command = CommandIDs.get;\n        const category = 'Security';\n        commands.addCommand(command, {\n            label: 'Security Report',\n            caption: 'Security Report',\n            execute: () => {\n                const widget = new IFrameWidget();\n                widget.update();\n                shell.add(widget, 'main');\n            },\n        });\n        palette.addItem({ command, category: category });\n        if (launcher) {\n            // Add launcher\n            launcher.add({\n                command: command,\n                category: category,\n            });\n        }\n    },\n};\nexport default extension;\nclass IFrameWidget extends IFrame {\n    constructor() {\n        super();\n        const baseUrl = PageConfig.getBaseUrl();\n        this.url = baseUrl + 'jupysec_extension/public/score.html';\n        this.id = 'jupysec_extension';\n        this.title.label = 'Report Card';\n        this.title.closable = true;\n        this.node.style.overflowY = 'auto';\n    }\n    async update() {\n        try {\n            const data = await requestAPI('scorecard_update');\n            console.log(data);\n        }\n        catch (reason) {\n            console.error(`Error on GET /jupysec_extension/scorecard_update.\\n${reason}`);\n        }\n    }\n}\n"],"names":[],"sourceRoot":""}